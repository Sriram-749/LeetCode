/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0)
            return null;
        return divideLists(lists, 0, lists.length - 1);
    }

    public ListNode divideLists(ListNode[] lists, int low, int high) {
        if(low == high)
            return lists[low];
        if(low + 1 == high)
            return mergeSort(lists[low], lists[high]);
        int mid = (low + high) / 2;
        ListNode left = divideLists(lists, low, mid);
        ListNode right = divideLists(lists, mid + 1, high);
        return mergeSort(left, right);
    }

    public ListNode mergeSort(ListNode l1, ListNode l2) {
        if(l1 == null && l2 == null) return null;
        else if(l1 == null) return l2;
        else if(l2 == null) return l1;
        ListNode list = null;
        if(l1.val <= l2.val) {
            list = new ListNode(l1.val);
            l1 = l1.next;
        }
        else {
            list = new ListNode(l2.val);
            l2 = l2.next;
        }
        ListNode head= list;
        while(l1 != null && l2 != null) {
            if(l1.val <= l2.val) {
                list.next = new ListNode(l1.val);
                l1 = l1.next;
            }
            else {
                list.next = new ListNode(l2.val);
                l2 = l2.next;
            }
            list = list.next;
        }
        if(l1 != null)
            list.next = l1;
        if(l2 != null)
            list.next = l2;
        return head;
    }
}
